name: Complete Flutter CI/CD with Version Check

on:
  push:
    branches: [ main, release/*, develop ]
  pull_request:
    branches: [ main, release/*, develop ]

env:
  FLUTTER_VERSION: '3.16.0'

jobs:
  version-check-and-build:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version-check.outputs.current-version }}
      version-updated: ${{ steps.version-check.outputs.version-updated }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check and Auto-Increment Flutter Version
      id: version-check
      uses: ./
      with:
        branch: ${{ github.ref_name }}
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'Auto-increment version to {{NEW_VERSION}} [skip ci]'
    
    - name: Version Summary
      run: |
        echo "## Version Information" >> $GITHUB_STEP_SUMMARY
        echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Previous Version | ${{ steps.version-check.outputs.previous-version }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Current Version | ${{ steps.version-check.outputs.current-version }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Version Updated | ${{ steps.version-check.outputs.version-updated }} |" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.version-check.outputs.version-updated }}" = "true" ]; then
          echo "| New Version | ${{ steps.version-check.outputs.new-version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Auto-incremented |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Status | Version OK |" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
    
    - name: Get Dependencies
      run: flutter pub get
    
    - name: Analyze Code
      run: flutter analyze
    
    - name: Run Tests
      run: flutter test --coverage
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        fail_ci_if_error: false
    
    - name: Build APK (Android)
      run: flutter build apk --release
    
    - name: Build iOS (macOS runner would be needed)
      if: runner.os == 'macOS'
      run: flutter build ios --release --no-codesign
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: flutter-builds-${{ steps.version-check.outputs.current-version }}
        path: |
          build/app/outputs/flutter-apk/app-release.apk
          build/ios/iphoneos/Runner.app
        retention-days: 30

  deploy:
    needs: version-check-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: flutter-builds-${{ needs.version-check-and-build.outputs.version }}
        path: builds/
    
    - name: Deploy to Production
      run: |
        echo "Deploying version ${{ needs.version-check-and-build.outputs.version }}"
        echo "Version was updated: ${{ needs.version-check-and-build.outputs.version-updated }}"
        
        # Add your deployment logic here
        # Examples:
        # - Upload to Google Play Store
        # - Upload to Apple App Store
        # - Deploy to Firebase
        # - Upload to internal distribution platform
        
        echo "Deployment completed for version ${{ needs.version-check-and-build.outputs.version }}"

  notify:
    needs: [version-check-and-build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Team
      run: |
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "Deployment successful for version ${{ needs.version-check-and-build.outputs.version }}"
          # Add notification logic (Slack, Teams, Email, etc.)
        else
          echo "Deployment failed for version ${{ needs.version-check-and-build.outputs.version }}"
          # Add failure notification logic
        fi
