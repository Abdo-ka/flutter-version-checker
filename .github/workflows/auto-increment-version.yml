name: Auto-Increment Version & Publish Action

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Required for pushing changes and creating tags
  actions: write   # Required for publishing action

jobs:
  auto-increment-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version comparison
        token: ${{ github.token }}  # Use default GitHub token
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Auto-Increment"
    
    - name: Get current version
      id: current-version
      run: |
        CURRENT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
    
    - name: Run Version Auto-Increment
      id: increment
      run: |
        # Run the auto-increment script
        node scripts/auto-increment-version.js
        
        # Check if version was actually changed
        NEW_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
        PACKAGE_VERSION=$(grep '"version":' package.json | sed 's/.*"version": "\([^"]*\)".*/\1/')
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        echo "New pubspec version: $NEW_VERSION"
        echo "Package.json version: $PACKAGE_VERSION"
        
        # Check if versions were actually incremented
        if [ "$NEW_VERSION" != "${{ steps.current-version.outputs.current_version }}" ]; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Version was incremented"
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è  Version was not changed"
        fi
      env:
        GITHUB_TOKEN: ${{ github.token }}
    
    - name: Update package.json version to match pubspec
      if: steps.increment.outputs.version_changed == 'true'
      run: |
        NEW_VERSION="${{ steps.increment.outputs.new_version }}"
        # Extract just the version part (before +) for package.json
        PACKAGE_VERSION=$(echo "$NEW_VERSION" | sed 's/+.*//')
        
        # Update package.json version
        npm version "$PACKAGE_VERSION" --no-git-tag-version
        
        echo "Updated package.json to version: $PACKAGE_VERSION"
    
    - name: Build distribution
      if: steps.increment.outputs.version_changed == 'true'
      run: |
        echo "Building distribution files..."
        npm run build
        
        # Verify dist files exist
        if [ ! -f "dist/index.js" ]; then
          echo "‚ùå Build failed: dist/index.js not found"
          exit 1
        fi
        
        echo "‚úÖ Build completed successfully"
    
    - name: Commit and push all changes
      if: steps.increment.outputs.version_changed == 'true'
      run: |
        NEW_VERSION="${{ steps.increment.outputs.new_version }}"
        
        # Stage all changes
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No additional changes to commit"
        else
          # Commit the additional changes (package.json, dist files, etc.)
          git commit -m "Build and package updates for version $NEW_VERSION
        
        - Updated package.json version
        - Built distribution files
        - Ready for release $NEW_VERSION"
          
          echo "‚úÖ Committed build and package updates"
        fi
        
        # Push all changes
        git push origin main
        echo "‚úÖ Pushed all changes to repository"
    
    - name: Create GitHub Release
      if: steps.increment.outputs.version_changed == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: v${{ steps.increment.outputs.new_version }}
        release_name: Release v${{ steps.increment.outputs.new_version }}
        body: |
          ## üöÄ Auto-Increment Release v${{ steps.increment.outputs.new_version }}
          
          ### Changes
          - Auto-incremented version from ${{ steps.current-version.outputs.current_version }} to ${{ steps.increment.outputs.new_version }}
          - Updated package.json and built distribution files
          - Ready for use as GitHub Action
          
          ### Usage
          ```yaml
          - name: Check and Auto-Increment Flutter Version
            uses: ${{ github.repository }}@v${{ steps.increment.outputs.new_version }}
            with:
              branch: main
              token: ${{ github.token }}
          ```
          
          Generated automatically by GitHub Actions ü§ñ
        draft: false
        prerelease: false
    
    outputs:
      version: ${{ steps.increment.outputs.new_version }}
      version_changed: ${{ steps.increment.outputs.version_changed }}
      package_version: ${{ steps.increment.outputs.package_version }}
